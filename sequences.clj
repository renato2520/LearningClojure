(ns com.clojure.examples
  (:gen-class))

;; ---------------------------- map -----------------------------------
(map inc [1 2 3])

(map (fn [x] (+ x 1)) '(1 2 3))

;; ---------------------------- reduce --------------------------------
(reduce + [1 2 3 4])

(reduce + -10 [1 2 3 4])

;; ---------------------------- into ----------------------------------
(into [] '(1 2 3))

(into (list) [1 2 3])

(into #{} [1 2 3])

(into [] #{1 2 3})

(into {} [[:a 1] [:b 2] [:c 3]])

(into [] {:a 1 :b 2 :c 3})

(reduce conj #{} [1 2 3])

;; ---------------------------- reverse -------------------------------
(reverse [1 2 3])

;; ---------------------------- iterate -------------------------------
(iterate + 0)

;; ---------------------------- range --(add-hook 'prog-mode-hook 'fira-code)-------------------------------
(range 5 10)

(range 0 100 5)

;; ---------------------------- repeatedly ----------------------------
(repeatedly 5 (fn [] (println "hi!")))

;; ---------------------------- doseq ---------------------------------
(doseq [animal ["cat" "dog" "horse"]] (println animal))

(doseq [n1 [1 2 3]
        n2 [4 5 6]]
  (println (+ n1 n2)))

;; ---------------------------- take ----------------------------------
(take 5 (range 0 100))

(take 10 (range 0 5))

;; ---------------------------- take-while ----------------------------
(take-while neg?  [-3 -2 -1 0 1 2 3])


;; ---------------------------- drop ----------------------------------
(drop 5 (range 0 10))

;; ---------------------------- drop-while ----------------------------
(drop-while neg?  [-3 -2 -1 0 1 2 3])

;; ---------------------------- concat --------------------------------
(concat '(1 2 3) '(4 5 6))

(concat '(1 2) '(4 5) '(7 8) '(9 10))

;; ---------------------------- cons ----------------------------------
(cons 0 '(1 2))

(def old-seq '(1 2))
(def new-seq (cons 0 old-seq))
old-seq
new-seq

;; ---------------------------- partition-by --------------------------
(partition-by #(< 3 %) [1 2 3 4 5 6])

(partition-by #(< 3 %) [1 2 3 4 5 6 1 2 3])

;; ---------------------------- group-by ------------------------------
(group-by #(< 3 %) [1 2 3 4 5 6 1 2 3])

;; ---------------------------- lazy-sequences ------------------------
(println (take 5 (iterate inc 0)))

;; ---------------------------- for -----------------------------------
(for [x '(1 2 3)]
  (+ 10 x))

(for [x '(-1 1 2) :when (< 0 x)] x)

(for [x (range 10) :while (not= x 5)] x)

(for [x ['a 'b 'c]
      y [1 2 3]]
  [x y])
